<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="severity" value="error"/>
    <module name="TreeWalker">
        <property name="cacheFile" value="${checkstyle.cache.file}"/>
        <property name="fileExtensions" value="java, xml"/>
        <module name="FileContentsHolder"/>
        <module name="AnnotationUseStyle">
            <property name="trailingArrayComma" value="ignore"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import static com.gigaspaces.internal"/>
            <property name="message" value="Internal gigaspaces functions should be used."/>
            <property name="ignoreComments" value="false"/>
        </module>
        <!--<module name="RegexpSinglelineJava">-->
            <!--<property name="format" value="^\t* +\t*\S"/>-->
            <!--<property name="message"-->
                      <!--value="Line has leading space characters; indentation should be performed with tabs only."/>-->
            <!--<property name="ignoreComments" value="true"/>-->
        <!--</module>-->
        <module name="RegexpSinglelineJava">
            <property name="format" value="Mockito\.verify[\W]"/>
            <property name="message" value="Use BDDMockito.then instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="BDDCatchException.then;"/>
            <property name="message" value="Use BDDAssertions.then instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import .*\.shade\."/>
            <property name="message" value="Do not use shaded libraries"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="@InjectMocks+\s+(?!@Spy|private)"/>
            <property name="message" value="Make field annotated with @InjectMocks private"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="@Mock\s+(?!private|protected)"/>
            <property name="message" value="Make field annotated with @Mock private or protected"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\sstatic\sorg\.mockito\.Matchers"/>
            <property name="message" value="Matchers is deprecated, use ArgumentMatchers instead."/>
        </module>
        <module name="ConstantName"/>
        <module name="FallThrough"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>
        <module name="AvoidStarImport"/>
        <module name="IllegalImport">
            <property name="illegalPkgs"
                      value="sun, junit.framework, org.hamcrest.CoreMatchers, org.hamcrest.core.IsNot, org.apache.commons.lang, com.googlecode.catchexception.CatchException, org.junit.experimental.theories, org.junit.runners.Parameterized"/>
        </module>
        <!-- LambdaJ should not be used due to performance issues, bugs and not being maintained anymore. -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="ch.lambdaj"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="ParameterAssignment"/>
        <module name="LineLength">
            <property name="max" value="180"/>
            <property name="tabWidth" value="1"/>
            <property name="ignorePattern"
                      value="(^import)|(\s*@ScenarioReference)|(\s*@ScenarioDescription)|(\s*title)|(\s*story)|(\s*@Given)|(\s*@When)|(\s*@Then)|(\s*@Alias)"/>
        </module>
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="OperatorWrap">
            <property name="tokens"
                      value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
            <property name="option" value="eol"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="allowMultipleEmptyLines" value="false"/>
        </module>
        <module name="ModifierOrder"/>
        <module name="DeclarationOrder">
            <property name="ignoreConstructors" value="true"/>
            <property name="ignoreModifiers" value="true"/>
        </module>
        <module name="RedundantModifier"/>
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="EmptyCatchBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1, 2, 3, 4"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
            <property name="publicMemberPattern"
                      value="^expectedException$|^temporaryFolder$|^exitRule$|^synchronizedTestRule$|^clearDatabaseRule.*$|^configurationRule$|^mockitoRule$"/>
        </module>
        <module name="ArrayTypeStyle"/>
        <module name="UpperEll"/>
        <module name="AvoidEscapedUnicodeCharacters"/>
        <module name="InterfaceTypeParameterName"/>
        <module name="ClassTypeParameterName"/>
        <module name="MethodTypeParameterName"/>
        <module name="NoLineWrap"/>
        <module name="OneTopLevelClass"/>
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="GenericWhitespace"/>
        <module name="NoFinalizer"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="CustomImportOrder">
            <property name="customImportOrderRules" value="THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC"/>
            <property name="standardPackageRegExp" value="^java"/>
            <property name="thirdPartyPackageRegExp" value=".*"/>
            <property name="separateLineBetweenGroups" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SummaryJavadocCheck">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="JavadocParagraph"/>
        <module name="AtclauseOrder"/>
        <module name="JavadocMethod">
            <property name="allowMissingJavadoc" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <module name="SingleLineJavadoc"/>
        <module name="JavadocStyle"/>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="lineWrappingIndentation" value="0"/>
            <property name="arrayInitIndent" value="8"/>
            <property name="tabWidth" value="4"/>
        </module>
        <module name="IllegalToken"/>
        <module name="ThrowsCount">
            <property name="max" value="3"/>
        </module>
        <module name="CommentsIndentationCheck"/>
        <module name="SingleSpaceSeparator"/>
        <module name="WhitespaceBeforeArrayInitializer"/>
        <module name="AvoidConstantAsFirstOperandInCondition"/>
        <module name="AnonInnerLength">
            <property name="max" value="25"/>
        </module>
        <module name="ArrayTrailingComma"/>
        <module name="BooleanExpressionComplexity"/>
        <module name="CatchParameterName"/>
        <module name="CommentsIndentation"/>
        <module name="CovariantEquals"/>
        <module name="CyclomaticComplexity"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyForInitializerPad"/>
        <module name="ExplicitInitialization"/>
        <module name="NestedForDepth"/>
        <module name="NestedIfDepth"/>
        <module name="NestedTryDepth"/>
        <module name="NPathComplexity"/>
        <module name="OuterTypeFilename"/>
        <module name="OuterTypeNumber"/>
        <module name="PackageAnnotation"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="TrailingComment"/>
        <module name="UnnecessaryParentheses"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="@Autowired\s*\n\s*private"/>
        <property name="message" value="@Autowired annotation should be on the same line as field"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="\n\r?\n\s*\}\s*."/>
        <property name="message"
                  value="Empty line before closing brace does not improve readability and can be removed"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="@(Mocked|Inject)Module\s+(?!.*(private|protected|public)).*;"/>
        <property name="message"
                  value="Fields annotated with @MockedModule and @InjectModule should not have default access"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value=".*spring.*[0-9]+.[0-9]+.xsd.*"/>
        <property name="message" value="We are not supposed to use specific versions of spring related schemas"/>
        <property name="fileExtensions" value="xml"/>
    </module>
    <module name="UniqueProperties"/>
    <module name="Translation"/>
    <module name="FileLength"/>
    <module name="SuppressWithNearbyCommentFilter"/>
    <module name="SuppressionCommentFilter"/>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CHECKSTYLE\:(\w+)\:OFF"/>
        <property name="onCommentFormat" value="CHECKSTYLE\:(\w+)\:ON"/>
        <property name="checkFormat" value="$1"/>
    </module>
    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions"
                  value="java,js,xq,xml,groovy,ftl,html,xsd,story,less,sql,css,erb,properties,sh,pp,conf,txt,jil,json,rb,xjb,yml"/>
        <property name="lineSeparator" value="lf_cr_crlf"/>
    </module>
    <module name="SeverityMatchFilter">
        <property name="severity" value="info"/>
        <property name="acceptOnMatch" value="false"/>
    </module>
</module>
